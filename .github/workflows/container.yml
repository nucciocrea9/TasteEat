
name: Build and deploy

on:
  workflow_dispatch:
  push:
    branches: [ test ]

  
env:
  CLIENT_ID: ${{secrets.CLIENT_ID}}
  REDIRECT_URI_SIGNIN: ${{secrets.REDIRECT_URI_SIGNIN}}
  USER_POOL_ID: ${{secrets.USER_POOL_ID}}
  REDIRECT_URI_SIGNOUT: ${{secrets.REDIRECT_URI_SIGNOUT}}
  IDENTITY_POOL_ID: ${{secrets.IDENTITY_POOL_ID}}
  REGION: ${{secrets.REGION}}
  BUCKET_US: ${{secrets.BUCKET_US}}
  BUCKET_EU: ${{secrets.BUCKET_EU}}
  BUCKET_US1: ${{secrets.BUCKET_US1}}
  API_URL_US: ${{secrets.API_URL_US}}
  API_URL_EU: ${{secrets.API_URL_EU}}
  API_URL_US1: ${{secrets.API_URL_US1}}

 
jobs:
  tf_fmt:
    name: Deploy Site
    runs-on: ubuntu-latest
    steps:

    - name: Checkout Repo
      working-directory: ./backend
      #uses: actions/checkout@v1
      run: terraform fmt -check

    - name: Terraform Init
      working-directory: ./backend
     # uses: hashicorp/terraform-github-actions/init@v0.4.0
      run: terraform init
      env:
        #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: 'terraform'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{secrets.AWS_SESSION_TOKEN}}

    - name: Terraform Validate
      working-directory: ./backend
      #uses: hashicorp/terraform-github-actions/validate@v0.3.7
      run: terraform plan

    - name: Terraform Apply
      working-directory: ./backend
      #uses: hashicorp/terraform-github-actions/apply@v0.4.0
      run: terraform apply -auto-approve
      env:
        #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: 'terraform'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{secrets.AWS_SESSION_TOKEN}}

  invalidate-distribution:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN}}
          aws-region: eu-west-1

      - name: Invalidate distribution
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.DISTRIBUTION_ID }} --paths "/*"          

  build:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install dependecies
      working-directory: ./frontend
      run: npm install

    - name: Build
      working-directory: ./frontend
      run: | 
       ls
       mkdir src/environments
       ENVIRONMENT_PROD='export const environment = { production: true, ClientId: "%s",  TokenScopesArray: ["openid", "email"],  RedirectUriSignIn: "%s", UserPoolId: "%s", RedirectUriSignOut: "%s", IdentityPoolId: "%s", region: "%s", bucket_us: "%s", bucket_eu: "%s", bucket_us1: "%s", api_url_us: "%s", api_url_eu: "%s", api_url_us1: "%s"};\n'
       printf "$ENVIRONMENT_PROD" "$CLIENT_ID" "$REDIRECT_URI_SIGNIN" "$USER_POOL_ID" "$REDIRECT_URI_SIGNOUT" "$IDENTITY_POOL_ID" "$REGION" "$BUCKET_US" "$BUCKET_EU" "$BUCKET_US1" "$API_URL_US" "$API_URL_EU" "$API_URL_US1"> src/environments/environment.prod.ts
       ENVIRONMENT_TS='export const environment = { production: false, ClientId: "%s", TokenScopesArray: ["openid", "email"],  RedirectUriSignIn: "%s", UserPoolId: "%s",RedirectUriSignOut: "%s", IdentityPoolId: "%s", region: "%s", bucket_us: "%s", bucket_eu: "%s", bucket_us1: "%s", api_url_us: "%s", api_url_eu: "%s", api_url_us1: "%s"};\n'
       printf "$ENVIRONMENT_TS" "$CLIENT_ID" "$REDIRECT_URI_SIGNIN" "$USER_POOL_ID" "$REDIRECT_URI_SIGNOUT" "$IDENTITY_POOL_ID" "$REGION" "$BUCKET_US" "$BUCKET_EU" "$BUCKET_US1" "$API_URL_US" "$API_URL_EU" "$API_URL_US1"> src/environments/environment.ts
       cat src/environments/environment.ts
       npm run build 
    
    - name: Copy into s3 bucket
      working-directory: ./frontend
      run: aws s3 sync dist/taste-eat/ s3://$HOSTING_BUCKET/
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{secrets.AWS_SESSION_TOKEN}}
        AWS_DEFAULT_REGION: ${{ secrets.REGION }}
        HOSTING_BUCKET: ${{ secrets.AWS_S3_BUCKET_NAME }}

    